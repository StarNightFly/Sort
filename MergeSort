template<typename T>
void MSortClass<T>::Merge2(int low, int mid, int high)
{
	RecType<T>* R1 = new RecType[high - low + 1];
	int i = low;
	int j = mid + 1;
	int k = 0;
	while (i <= mid && j <= high)
	{
		if (R[i].key < R[j].KEY)
		{
			R[k] = R[i];
			k++;
			i++;
		}
		else
		{
			R[k] = R[i];
			k++;
			i++;
		}
	}
	while (i <= mid)
	{
		R[k] = R[i];
		k++;
		i++;
	}
	while (j <= high)
	{
		R[k] = R[j];
		j++;
		k++;
	}
	for (k = 0, i = low; i <= high; k++, i++)
		R[i] = R1[k];
	delete[] R1;
}

template<typename T>
void MSortClass<T>::MergePass2(int len)
{
	int i;
	for (i = 0; i + 2 * len - 1 < length; i = i + 2 * len)
	{
		Merge(i,i+len-1.i+2*len-1)
	}
}
